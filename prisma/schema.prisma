// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// scholarly insight models
model BrowseHistory {
    id            Int      @id @default(autoincrement())
    url           String
    title         String
    browsedAt     DateTime @default(now())
    browsedByUser String
    browsedBy     User     @relation(fields: [browsedByUser], references: [id])
}

model QueryParam {
    id             Int          @id @default(autoincrement())
    key            String
    value          String
    order          Int
    operator       String?
    belongsToQuery Int
    belongsTo      QueryHistory @relation(fields: [belongsToQuery], references: [id])
}

model QueryHistory {
    id            Int          @id @default(autoincrement())
    maxResults    Int
    start         Int
    queriedAt     DateTime     @default(now())
    queryParams   QueryParam[]
    queriedByUser String
    queriedBy     User         @relation(fields: [queriedByUser], references: [id])
}

model Bookmark {
    id               Int      @id @default(autoincrement())
    url              String
    title            String
    bookmarkedAt     DateTime @default(now())
    bookmarkedByUser String
    bookmarkedBy     User     @relation(fields: [bookmarkedByUser], references: [id])
}

model Field {
    id           Int    @id @default(autoincrement())
    name         String
    displayName  String
    subscribedBy User[]
}

model Tag {
    id                 Int       @id @default(autoincrement())
    displayName        String
    attachedToChannels Channel[]
}

model Channel {
    id            Int       @id @default(autoincrement())
    name          String
    createdAt     DateTime  @default(now())
    createdByUser String
    createdBy     User      @relation("CreatorRelationship", fields: [createdByUser], references: [id])
    ownedByUser   String
    ownedBy       User      @relation("OwnerRelationship", fields: [ownedByUser], references: [id])
    members       User[]    @relation("MemberRelationship")
    tags          Tag[]
    messages      Message[]
}

model Message {
    id            Int       @id @default(autoincrement())
    content       String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    replyToId     Int?
    replyTo       Message?  @relation("MessageReplyRelationship", fields: [replyToId], references: [id])
    repliedBy     Message[] @relation("MessageReplyRelationship")
    sentByUser    String
    sentBy        User      @relation(fields: [sentByUser], references: [id])
    sentToChannel Int
    sentTo        Channel   @relation(fields: [sentToChannel], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String          @id @default(cuid())
    name               String?
    email              String?         @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    queryHistories     QueryHistory[]
    browseHistories    BrowseHistory[]
    bookmarks          Bookmark[]
    fieldSubscriptions Field[]
    createdChannels    Channel[]       @relation("CreatorRelationship")
    ownedChannels      Channel[]       @relation("OwnerRelationship")
    joinedChannels     Channel[]       @relation("MemberRelationship")
    sentMessages       Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
