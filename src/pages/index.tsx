import { Button, Group, MantineProvider, Stack } from "@mantine/core";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import React, { useState } from "react";
import { ArticleElement } from "~/components/arxiv/ArticleElement";
import { QueryPanel } from "~/components/arxiv/QueryPanel";
import { queryArxiv } from "~/lib/query";
import { IArxivArticle } from "~/models/arxiv";
import { IQueryParam } from "~/models/queryParam";

import { api } from "~/utils/api";

export const Home: React.FC = () => {
  const { data: sessionData } = useSession();
  const utils = api.useUtils();

  const onSearch = async (params: IQueryParam[]) => {
    console.log(params);

    const result = await queryArxiv(params);
    console.log(result);

    if (Array.isArray(result)) {
      setArticles((state) => result);
    }
  };

  const [articles, setArticles] = useState<IArxivArticle[]>([]);

  const onBrowse = (article: IArxivArticle) => {
    if (sessionData?.user === undefined) {
      console.log("user not signed in");
      return;
    }

    utils.post.createBrowseHistory.fetch({
      url: article.abstractLink,
      title: article.title,
    });
  };
  const onBookmark = (article: IArxivArticle) => {
    if (sessionData?.user === undefined) {
      console.log("user not signed in");
      return;
    }

    utils.post.createBookmark.fetch({
      url: article.abstractLink,
      title: article.title,
    });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen w-full flex-1 flex-row items-center justify-center">
        <MantineProvider>
          <Group preventGrowOverflow={true} className="w-full">
            <div className="flex flex-1 flex-col items-center justify-center gap-12">
              <QueryPanel onSearch={onSearch} />
              <Group>
                <Button onClick={() => signIn()}>Sign in</Button>
                <Button onClick={() => signOut()}>Sign out</Button>
              </Group>
            </div>
            <div className="flex h-[calc(100vh-1rem)] flex-1 overflow-y-scroll pb-2 pt-2">
              <Stack className="w-full">
                {articles.map((article) => (
                  <ArticleElement
                    key={article.id}
                    article={article}
                    onBookmark={() => onBookmark(article)}
                    onBrowse={() => onBrowse(article)}
                  />
                ))}
              </Stack>
            </div>
          </Group>
        </MantineProvider>
      </main>
    </>
  );
};

export default Home;

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.post.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
